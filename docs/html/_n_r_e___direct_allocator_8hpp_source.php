<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Memory: /mnt/c/Users/abell/Documents/GitHub/NRE-Memory/src/Memory/Allocator/NRE_DirectAllocator.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_223fe3ddb66d6cdaa34448ac551f01ae.php">Memory</a></li><li class="navelem"><a class="el" href="dir_90418763254490afbe31fb653731f493.php">Allocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_DirectAllocator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___direct_allocator_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;    </div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;cassert&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #include &lt;limits&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &lt;memory&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">    #include &quot;<a class="code" href="_n_r_e___i_allocator_8hpp.php">NRE_IAllocator.hpp</a>&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    </div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_memory.php">Memory</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        </div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">   33</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a> : <span class="keyword">public</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator</a>&lt;DirectAllocator&lt;T&gt;&gt; {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                <span class="keyword">public</span>: <span class="comment">// Fields</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same.php">   36</a></span>&#160;                    <span class="keyword">struct </span><a class="code" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same.php">isSame</a> : std::false_type {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                    };</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same_3_01_direct_allocator_3_01_k_01_4_01_4.php">   39</a></span>&#160;                    <span class="keyword">struct </span><a class="code" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same.php">isSame</a>&lt;<a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt;K&gt;&gt; : std::true_type {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                    };</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    </div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="keyword">public</span>: <span class="comment">// Methods</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ac8014229d6a6492e1968a025353b89b3">   46</a></span>&#160;<span class="comment"></span>                    std::size_t <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ac8014229d6a6492e1968a025353b89b3">getMaxSize</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                        <span class="keywordflow">return</span> std::numeric_limits&lt;std::size_t&gt;::max();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    }</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a21839163c7dd59239ec3ea149d7458e3">   54</a></span>&#160;                    T* <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a21839163c7dd59239ec3ea149d7458e3">getAddress</a>(T&amp; <span class="keywordtype">object</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        <span class="keywordflow">return</span> std::addressof(<span class="keywordtype">object</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                    }</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a0a3aaf395eeb5caaad2f3ae3c5580611">   62</a></span>&#160;                    <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a0a3aaf395eeb5caaad2f3ae3c5580611">getAddress</a>(T <span class="keyword">const</span>&amp; <span class="keywordtype">object</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <span class="keywordflow">return</span> std::addressof(<span class="keywordtype">object</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    }</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#af164ce84938bbccd55bc40e84934b62e">   70</a></span>&#160;                    [[nodiscard]] T* <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#af164ce84938bbccd55bc40e84934b62e">allocate</a>(std::size_t n) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        T* data = static_cast &lt;T*&gt; (malloc(n * <span class="keyword">sizeof</span>(T)));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                        <span class="keywordflow">if</span> (!data) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                            <span class="keywordflow">throw</span> std::bad_alloc();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                        }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                        <span class="keywordflow">return</span> data;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    }</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#aeec58465a06aec7f5c806be1d8f27b61">   81</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#aeec58465a06aec7f5c806be1d8f27b61">deallocate</a>(T*&amp; p) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        free(p);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        p = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    }</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a318cf1b70716a4fa4e72a25a98e1bc57">   90</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a318cf1b70716a4fa4e72a25a98e1bc57">deallocate</a>(T*&amp; p, std::size_t n) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        (void)n;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        free(p);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        p = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class </span>K, <span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a844222c73953e74882ff52e6b6eebc42">  101</a></span>&#160;                    K* <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a844222c73953e74882ff52e6b6eebc42">construct</a>(K* p, Args &amp;&amp; ... args) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        assert(p != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordflow">return</span> static_cast &lt;K*&gt; (::new(static_cast &lt;void*&gt; (p)) K(std::forward&lt;Args&gt;(args)...));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a021280fc327c81a9881e4d6c29acde5e">  110</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a021280fc327c81a9881e4d6c29acde5e">destroy</a>(K* p) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        p-&gt;~K();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    template &lt;class K, typename std::enable_if&lt;DirectAllocator&lt;T&gt;::isSame&lt;K&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">  119</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">equal</a>(K <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        (void)o;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    template &lt;class K, typename std::enable_if&lt;!DirectAllocator&lt;T&gt;::isSame&lt;K&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">  129</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">equal</a>(K <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        (void)o;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a90465dfca3f08f978514dc76c2cdf27b">  139</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a90465dfca3f08f978514dc76c2cdf27b">operator ==</a>(<a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator&lt;K&gt;</a> <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">equal</a>(o);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a727537922d07b8d6f2434593c361de3a">  148</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a727537922d07b8d6f2434593c361de3a">operator !=</a>(<a class="code" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator&lt;K&gt;</a> <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <span class="keywordflow">return</span>  !(*<span class="keyword">this</span> == o);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            };</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            </div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_aeec58465a06aec7f5c806be1d8f27b61"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#aeec58465a06aec7f5c806be1d8f27b61">NRE::Memory::DirectAllocator::deallocate</a></div><div class="ttdeci">void deallocate(T *&amp;p)</div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:81</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a844222c73953e74882ff52e6b6eebc42"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a844222c73953e74882ff52e6b6eebc42">NRE::Memory::DirectAllocator::construct</a></div><div class="ttdeci">K * construct(K *p, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:101</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a0a3aaf395eeb5caaad2f3ae3c5580611"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a0a3aaf395eeb5caaad2f3ae3c5580611">NRE::Memory::DirectAllocator::getAddress</a></div><div class="ttdeci">const T * getAddress(T const &amp;object) const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:62</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a727537922d07b8d6f2434593c361de3a"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a727537922d07b8d6f2434593c361de3a">NRE::Memory::DirectAllocator::operator!=</a></div><div class="ttdeci">bool operator!=(DirectAllocator&lt; K &gt; const &amp;o) const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:148</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php">NRE::Memory::IAllocator</a></div><div class="ttdoc">Describe an allocator object. </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:32</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a021280fc327c81a9881e4d6c29acde5e"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a021280fc327c81a9881e4d6c29acde5e">NRE::Memory::DirectAllocator::destroy</a></div><div class="ttdeci">void destroy(K *p)</div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:110</div></div>
<div class="ttc" id="namespace_memory_php"><div class="ttname"><a href="namespace_memory.php">Memory</a></div><div class="ttdoc">Memory&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a></div><div class="ttdoc">Allocate memory using malloc and free directly. </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:33</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_ac8014229d6a6492e1968a025353b89b3"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ac8014229d6a6492e1968a025353b89b3">NRE::Memory::DirectAllocator::getMaxSize</a></div><div class="ttdeci">std::size_t getMaxSize() const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:46</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a318cf1b70716a4fa4e72a25a98e1bc57"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a318cf1b70716a4fa4e72a25a98e1bc57">NRE::Memory::DirectAllocator::deallocate</a></div><div class="ttdeci">void deallocate(T *&amp;p, std::size_t n)</div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:90</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_af164ce84938bbccd55bc40e84934b62e"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#af164ce84938bbccd55bc40e84934b62e">NRE::Memory::DirectAllocator::allocate</a></div><div class="ttdeci">T * allocate(std::size_t n)</div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:70</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="_n_r_e___i_allocator_8hpp_php"><div class="ttname"><a href="_n_r_e___i_allocator_8hpp.php">NRE_IAllocator.hpp</a></div><div class="ttdoc">Declaration of Memory&amp;#39;s API&amp;#39;s Object : IAllocator. </div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a21839163c7dd59239ec3ea149d7458e3"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a21839163c7dd59239ec3ea149d7458e3">NRE::Memory::DirectAllocator::getAddress</a></div><div class="ttdeci">T * getAddress(T &amp;object) const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:54</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_ae962c2214146350e72864d7a66828072"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">NRE::Memory::DirectAllocator::equal</a></div><div class="ttdeci">bool equal(K const &amp;o) const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:119</div></div>
<div class="ttc" id="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same_php"><div class="ttname"><a href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same.php">NRE::Memory::DirectAllocator::isSame</a></div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_direct_allocator_php_a90465dfca3f08f978514dc76c2cdf27b"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a90465dfca3f08f978514dc76c2cdf27b">NRE::Memory::DirectAllocator::operator==</a></div><div class="ttdeci">bool operator==(DirectAllocator&lt; K &gt; const &amp;o) const </div><div class="ttdef"><b>Definition:</b> NRE_DirectAllocator.hpp:139</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
