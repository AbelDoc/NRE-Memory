<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Memory: /mnt/c/Users/abell/Documents/GitHub/NRE-Memory/src/Memory/Allocator/NRE_IAllocator.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_223fe3ddb66d6cdaa34448ac551f01ae.php">Memory</a></li><li class="navelem"><a class="el" href="dir_90418763254490afbe31fb653731f493.php">Allocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_IAllocator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___i_allocator_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;    </div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    </div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;type_traits&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #include &lt;utility&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &quot;Utility/Interfaces/NRE_StaticInterface.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    </div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_memory.php">Memory</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            </div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">   32</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator</a> : <span class="keyword">public</span> Utility::StaticInterface&lt;T, IAllocator&gt; {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                static_assert(!std::is_void_v&lt;T&gt;);    </div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                <span class="keyword">public</span>: <span class="comment">// Methods</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ae1f04ef5ff7a1504f30c433fa6106916">   39</a></span>&#160;<span class="comment"></span>                    std::size_t <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ae1f04ef5ff7a1504f30c433fa6106916">getMaxSize</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().getMaxSize();</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    }</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a546ef27c17d2c2a034abd989526f9770">   47</a></span>&#160;                    T* <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a546ef27c17d2c2a034abd989526f9770">getAddress</a>(T&amp; <span class="keywordtype">object</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().getAddress(<span class="keywordtype">object</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    }</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8f32641335996c8311f26817c0816b12">   55</a></span>&#160;                    <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8f32641335996c8311f26817c0816b12">getAddress</a>(T <span class="keyword">const</span> &amp; <span class="keywordtype">object</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().getAddress(<span class="keywordtype">object</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    }</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#af13b76e1e481d9ecbe1bda7b6ab080fa">   63</a></span>&#160;                    [[nodiscard]] T* <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#af13b76e1e481d9ecbe1bda7b6ab080fa">allocate</a>(std::size_t n) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().allocate(n);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    }</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad05fa4c8c1085707f4b912db2ca667d7">   70</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad05fa4c8c1085707f4b912db2ca667d7">deallocate</a>(T*&amp; p) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        this-&gt;impl().deallocate(p);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    }</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad4748b052104daed4a44aa2f5ced23b3">   78</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad4748b052104daed4a44aa2f5ced23b3">deallocate</a>(T*&amp; p, std::size_t n) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        this-&gt;impl().deallocate(p, n);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class </span>K, <span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a2ef035d639ca3994c4871f4131bfb9e2">   87</a></span>&#160;                    K* <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a2ef035d639ca3994c4871f4131bfb9e2">construct</a>(K* p, Args &amp;&amp; ... args) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().construct(p, std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8bde0f4fe8ca99fe9aede3081707f566">   95</a></span>&#160;                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8bde0f4fe8ca99fe9aede3081707f566">destroy</a>(K* p) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        this-&gt;impl().destroy(p);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a096981a3600ebc03140c9345482acb04">  104</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a096981a3600ebc03140c9345482acb04">operator ==</a>(<a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator&lt;K&gt;</a> <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="keywordflow">return</span> this-&gt;impl().equal(o);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ac27e2268a23a2feb285bb956cc267a1f">  113</a></span>&#160;                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ac27e2268a23a2feb285bb956cc267a1f">operator !=</a>(<a class="code" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator&lt;K&gt;</a> <span class="keyword">const</span>&amp; o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        <span class="keywordflow">return</span>  !(*<span class="keyword">this</span> == o);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div><div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_a8f32641335996c8311f26817c0816b12"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8f32641335996c8311f26817c0816b12">NRE::Memory::IAllocator::getAddress</a></div><div class="ttdeci">const T * getAddress(T const &amp;object) const </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:55</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_ad4748b052104daed4a44aa2f5ced23b3"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad4748b052104daed4a44aa2f5ced23b3">NRE::Memory::IAllocator::deallocate</a></div><div class="ttdeci">void deallocate(T *&amp;p, std::size_t n)</div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:78</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_a546ef27c17d2c2a034abd989526f9770"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a546ef27c17d2c2a034abd989526f9770">NRE::Memory::IAllocator::getAddress</a></div><div class="ttdeci">T * getAddress(T &amp;object) const </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:47</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php">NRE::Memory::IAllocator</a></div><div class="ttdoc">Describe an allocator object. </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:32</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_ae1f04ef5ff7a1504f30c433fa6106916"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ae1f04ef5ff7a1504f30c433fa6106916">NRE::Memory::IAllocator::getMaxSize</a></div><div class="ttdeci">std::size_t getMaxSize() const </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:39</div></div>
<div class="ttc" id="namespace_memory_php"><div class="ttname"><a href="namespace_memory.php">Memory</a></div><div class="ttdoc">Memory&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_ad05fa4c8c1085707f4b912db2ca667d7"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad05fa4c8c1085707f4b912db2ca667d7">NRE::Memory::IAllocator::deallocate</a></div><div class="ttdeci">void deallocate(T *&amp;p)</div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:70</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_a096981a3600ebc03140c9345482acb04"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a096981a3600ebc03140c9345482acb04">NRE::Memory::IAllocator::operator==</a></div><div class="ttdeci">bool operator==(IAllocator&lt; K &gt; const &amp;o) const </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:104</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_a8bde0f4fe8ca99fe9aede3081707f566"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8bde0f4fe8ca99fe9aede3081707f566">NRE::Memory::IAllocator::destroy</a></div><div class="ttdeci">void destroy(K *p)</div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:95</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_a2ef035d639ca3994c4871f4131bfb9e2"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a2ef035d639ca3994c4871f4131bfb9e2">NRE::Memory::IAllocator::construct</a></div><div class="ttdeci">K * construct(K *p, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:87</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_ac27e2268a23a2feb285bb956cc267a1f"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ac27e2268a23a2feb285bb956cc267a1f">NRE::Memory::IAllocator::operator!=</a></div><div class="ttdeci">bool operator!=(IAllocator&lt; K &gt; const &amp;o) const </div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:113</div></div>
<div class="ttc" id="class_n_r_e_1_1_memory_1_1_i_allocator_php_af13b76e1e481d9ecbe1bda7b6ab080fa"><div class="ttname"><a href="class_n_r_e_1_1_memory_1_1_i_allocator.php#af13b76e1e481d9ecbe1bda7b6ab080fa">NRE::Memory::IAllocator::allocate</a></div><div class="ttdeci">T * allocate(std::size_t n)</div><div class="ttdef"><b>Definition:</b> NRE_IAllocator.hpp:63</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
