<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Memory: NRE::Memory::DirectAllocator&lt; T &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Memory</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_memory_1_1_direct_allocator-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Memory::DirectAllocator&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Allocate memory using malloc and free directly.  
 <a href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___direct_allocator_8hpp_source.php">NRE_DirectAllocator.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Memory::DirectAllocator&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_memory_1_1_direct_allocator.png" usemap="#NRE::Memory::DirectAllocator_3C_20T_20_3E_map" alt=""/>
  <map id="NRE::Memory::DirectAllocator_3C_20T_20_3E_map" name="NRE::Memory::DirectAllocator&lt; T &gt;_map">
<area href="class_n_r_e_1_1_memory_1_1_i_allocator.php" alt="NRE::Memory::IAllocator&lt; DirectAllocator&lt; T &gt; &gt;" shape="rect" coords="0,56,332,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same.php">isSame</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_n_r_e_1_1_memory_1_1_direct_allocator_1_1is_same_3_01_direct_allocator_3_01_k_01_4_01_4.php">isSame&lt; DirectAllocator&lt; K &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac8014229d6a6492e1968a025353b89b3"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ac8014229d6a6492e1968a025353b89b3">getMaxSize</a> () const </td></tr>
<tr class="separator:ac8014229d6a6492e1968a025353b89b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21839163c7dd59239ec3ea149d7458e3"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a21839163c7dd59239ec3ea149d7458e3">getAddress</a> (T &amp;object) const </td></tr>
<tr class="separator:a21839163c7dd59239ec3ea149d7458e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3aaf395eeb5caaad2f3ae3c5580611"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a0a3aaf395eeb5caaad2f3ae3c5580611">getAddress</a> (T const &amp;object) const </td></tr>
<tr class="separator:a0a3aaf395eeb5caaad2f3ae3c5580611"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af164ce84938bbccd55bc40e84934b62e"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#af164ce84938bbccd55bc40e84934b62e">allocate</a> (std::size_t n)</td></tr>
<tr class="separator:af164ce84938bbccd55bc40e84934b62e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec58465a06aec7f5c806be1d8f27b61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#aeec58465a06aec7f5c806be1d8f27b61">deallocate</a> (T *&amp;p)</td></tr>
<tr class="separator:aeec58465a06aec7f5c806be1d8f27b61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a318cf1b70716a4fa4e72a25a98e1bc57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a318cf1b70716a4fa4e72a25a98e1bc57">deallocate</a> (T *&amp;p, std::size_t n)</td></tr>
<tr class="separator:a318cf1b70716a4fa4e72a25a98e1bc57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a844222c73953e74882ff52e6b6eebc42"><td class="memTemplParams" colspan="2">template&lt;class K , class... Args&gt; </td></tr>
<tr class="memitem:a844222c73953e74882ff52e6b6eebc42"><td class="memTemplItemLeft" align="right" valign="top">K *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a844222c73953e74882ff52e6b6eebc42">construct</a> (K *p, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a844222c73953e74882ff52e6b6eebc42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a021280fc327c81a9881e4d6c29acde5e"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a021280fc327c81a9881e4d6c29acde5e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a021280fc327c81a9881e4d6c29acde5e">destroy</a> (K *p)</td></tr>
<tr class="separator:a021280fc327c81a9881e4d6c29acde5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae962c2214146350e72864d7a66828072"><td class="memTemplParams" colspan="2">template&lt;class K , typename std::enable_if&lt; DirectAllocator&lt; T &gt;::isSame&lt; K &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ae962c2214146350e72864d7a66828072"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">equal</a> (K const &amp;o) const </td></tr>
<tr class="separator:ae962c2214146350e72864d7a66828072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae962c2214146350e72864d7a66828072"><td class="memTemplParams" colspan="2">template&lt;class K , typename std::enable_if&lt;!DirectAllocator&lt; T &gt;::isSame&lt; K &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ae962c2214146350e72864d7a66828072"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#ae962c2214146350e72864d7a66828072">equal</a> (K const &amp;o) const </td></tr>
<tr class="separator:ae962c2214146350e72864d7a66828072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90465dfca3f08f978514dc76c2cdf27b"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a90465dfca3f08f978514dc76c2cdf27b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a90465dfca3f08f978514dc76c2cdf27b">operator==</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; K &gt; const &amp;o) const </td></tr>
<tr class="separator:a90465dfca3f08f978514dc76c2cdf27b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a727537922d07b8d6f2434593c361de3a"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a727537922d07b8d6f2434593c361de3a"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php#a727537922d07b8d6f2434593c361de3a">operator!=</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; K &gt; const &amp;o) const </td></tr>
<tr class="separator:a727537922d07b8d6f2434593c361de3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">NRE::Memory::IAllocator&lt; DirectAllocator&lt; T &gt; &gt;</a></td></tr>
<tr class="memitem:ae1f04ef5ff7a1504f30c433fa6106916 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ae1f04ef5ff7a1504f30c433fa6106916">getMaxSize</a> () const</td></tr>
<tr class="separator:ae1f04ef5ff7a1504f30c433fa6106916 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a546ef27c17d2c2a034abd989526f9770 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a546ef27c17d2c2a034abd989526f9770">getAddress</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; &amp;object) const</td></tr>
<tr class="separator:a546ef27c17d2c2a034abd989526f9770 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f32641335996c8311f26817c0816b12 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8f32641335996c8311f26817c0816b12">getAddress</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt;const &amp;object) const</td></tr>
<tr class="separator:a8f32641335996c8311f26817c0816b12 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af13b76e1e481d9ecbe1bda7b6ab080fa inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#af13b76e1e481d9ecbe1bda7b6ab080fa">allocate</a> (std::size_t n)</td></tr>
<tr class="separator:af13b76e1e481d9ecbe1bda7b6ab080fa inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad05fa4c8c1085707f4b912db2ca667d7 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad05fa4c8c1085707f4b912db2ca667d7">deallocate</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; *&amp;p)</td></tr>
<tr class="separator:ad05fa4c8c1085707f4b912db2ca667d7 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4748b052104daed4a44aa2f5ced23b3 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ad4748b052104daed4a44aa2f5ced23b3">deallocate</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; T &gt; *&amp;p, std::size_t n)</td></tr>
<tr class="separator:ad4748b052104daed4a44aa2f5ced23b3 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ef035d639ca3994c4871f4131bfb9e2 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">K *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a2ef035d639ca3994c4871f4131bfb9e2">construct</a> (K *p, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a2ef035d639ca3994c4871f4131bfb9e2 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bde0f4fe8ca99fe9aede3081707f566 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a8bde0f4fe8ca99fe9aede3081707f566">destroy</a> (K *p)</td></tr>
<tr class="separator:a8bde0f4fe8ca99fe9aede3081707f566 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096981a3600ebc03140c9345482acb04 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#a096981a3600ebc03140c9345482acb04">operator==</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator</a>&lt; K &gt; const &amp;o) const</td></tr>
<tr class="separator:a096981a3600ebc03140c9345482acb04 inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac27e2268a23a2feb285bb956cc267a1f inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php#ac27e2268a23a2feb285bb956cc267a1f">operator!=</a> (<a class="el" href="class_n_r_e_1_1_memory_1_1_i_allocator.php">IAllocator</a>&lt; K &gt; const &amp;o) const</td></tr>
<tr class="separator:ac27e2268a23a2feb285bb956cc267a1f inherit pub_methods_class_n_r_e_1_1_memory_1_1_i_allocator"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br />
class NRE::Memory::DirectAllocator&lt; T &gt;</h3>

<p>Allocate memory using malloc and free directly. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="af164ce84938bbccd55bc40e84934b62e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::allocate </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Allocate n * sizeof(T) bytes </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">n</td><td>the number of object </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pointer on the first allocated bytes </dd></dl>

</div>
</div>
<a class="anchor" id="a844222c73953e74882ff52e6b6eebc42"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">K* <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::construct </td>
          <td>(</td>
          <td class="paramtype">K *&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct a K-type object in the given pointer with given arguments </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the pointer to construct the object </td></tr>
    <tr><td class="paramname">args</td><td>the construction arguments </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeec58465a06aec7f5c806be1d8f27b61"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::deallocate </td>
          <td>(</td>
          <td class="paramtype">T *&amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Deallocate a pointer given by an allocate call </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the pointer on the first bytes allocated </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a318cf1b70716a4fa4e72a25a98e1bc57"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::deallocate </td>
          <td>(</td>
          <td class="paramtype">T *&amp;&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Deallocate a pointer given by an allocate call </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the pointer on the first bytes allocated </td></tr>
    <tr><td class="paramname">n</td><td>the number of object allocated </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a021280fc327c81a9881e4d6c29acde5e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::destroy </td>
          <td>(</td>
          <td class="paramtype">K *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Destroy an given to the given pointer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the object address </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae962c2214146350e72864d7a66828072"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename std::enable_if&lt; DirectAllocator&lt; T &gt;::isSame&lt; K &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::equal </td>
          <td>(</td>
          <td class="paramtype">K const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and o </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the other allocator to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="ae962c2214146350e72864d7a66828072"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename std::enable_if&lt;!DirectAllocator&lt; T &gt;::isSame&lt; K &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::equal </td>
          <td>(</td>
          <td class="paramtype">K const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and o </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the other allocator to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a21839163c7dd59239ec3ea149d7458e3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::getAddress </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>object</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Retrieve the address of an object </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">object</td><td>the object to return his address </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the object's address </dd></dl>

</div>
</div>
<a class="anchor" id="a0a3aaf395eeb5caaad2f3ae3c5580611"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::getAddress </td>
          <td>(</td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>object</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Retrieve the address of an object </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">object</td><td>the object to return his address </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the object's address </dd></dl>

</div>
</div>
<a class="anchor" id="ac8014229d6a6492e1968a025353b89b3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum allocation size </dd></dl>

</div>
</div>
<a class="anchor" id="a727537922d07b8d6f2434593c361de3a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Inequality test between this and o </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the other allocator to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a90465dfca3f08f978514dc76c2cdf27b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">NRE::Memory::DirectAllocator</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_memory_1_1_direct_allocator.php">DirectAllocator</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and o </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the other allocator to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Memory/src/Memory/Allocator/<a class="el" href="_n_r_e___direct_allocator_8hpp_source.php">NRE_DirectAllocator.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
